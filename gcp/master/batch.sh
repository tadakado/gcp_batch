#!/bin/bash
# Copyright (c) 2016,2017,2018,2019 Tadashi Kadowaki.
#
# invoke worker instances

##### default settings (DO NOT EDIT THIS FILE BUT config.sh)

PREEMPTIBLE=yes # use preemptilbe instance
DISK_SIZE=10GB  # disk size
LOCAL_SSD=yes   # mount local-ssd
ZONES=(us-west1-a us-west1-b us-west1-c
       us-central1-a us-central1-b us-central1-c us-central1-f
       us-east1-b us-east1-c us-east1-d) # zones to be used
SCRIPTS={script,data} # scripts to be uploaded

##### load settings

SCRIPTDIR=`dirname $0`
source $SCRIPTDIR/config.sh

##### version check

if [ "$VERSION_CHECK" == yes ]; then
  source $SCRIPTDIR/version.sh
fi

##### args

while :; do
    if [ "$1" == -r ]; then
        RESUME=yes
        shift 1
    elif [ "$1" == -d ]; then
        DEBUG=yes
        shift 1
    elif [ "$1" == -f ]; then
        OVERWRITE_SCRIPT=yes
        shift 1
    else
        break
    fi
done

read IMAGE IMAGE_PROJECT MACHINE_TYPE N_INSTANCES USER GS_URI ANALYSIS_NAME COMMAND <<< $*

if [ "$COMMAND" == "" ]; then
    echo "Usage: [-d] [-f] <image> <image-project> <machine type> <# of instances> <user name> <gs uri> <analysis name> <command>"
    echo "  -d: debug mode"
    echo "  -f: force to re-upload scripts"
    echo "  -r: resume instances (temporal results are placed when the instance restarts from an accidential down)"
    exit 1
fi

for e in IMAGE IMAGE_PROJECT MACHINE_TYPE N_INSTANCES USER GS_URI ANALYSIS_NAME COMMAND; do
    eval echo $e: '$'$e
done

##### upload scripts

GS_URI=${GS_URI%/}
GS_RUN_FOLDER=$GS_URI/$ANALYSIS_NAME/run

ls_ok=no
gsutil ls $GS_RUN_FOLDER/script.tar.bz2 > /dev/null 2>&1 && ls_ok=yes
if [ "$ls_ok" == no -o "$OVERWRITE_SCRIPT" == yes ]; then
    if [ "$ls_ok" == yes -a "$OVERWRITE_SCRIPT" == yes ]; then
        BK_FOLDER=BK_`date +%Y%m%d_%H%M`
        gsutil mv $GS_RUN_FOLDER/{script.tar.bz2,INSTANCE_OPTIONS.txt} $GS_RUN_FOLDER/$BK_FOLDER/
    fi
    bash -c "tar cjfh - -C `cd $SCRIPTDIR/../..; pwd` $SCRIPTS gcp/worker" | \
        gsutil cp - $GS_RUN_FOLDER/script.tar.bz2
fi

##### launch instances

METADATA="--metadata DEBUG=$DEBUG,RESUME=$RESUME,LOCAL_SSD=$LOCAL_SSD,USER=$USER,GS_URI=$GS_URI,ANALYSIS_NAME=$ANALYSIS_NAME,RUN_DIRECT=no,COMMAND=\"$COMMAND\" \
          --metadata-from-file startup-script=gcp/worker/startup.sh,shutdown-script=gcp/worker/shutdown.sh"
OPTS="--machine-type $MACHINE_TYPE $METADATA --service-account default --scopes storage-rw,pubsub,logging-write"
if [ "$PREEMPTIBLE" == yes ]; then
    echo use preemptible instances
    OPTS="$OPTS --no-restart-on-failure --maintenance-policy TERMINATE --preemptible"
else
    echo use regular instances
    OPTS="$OPTS --maintenance-policy MIGRATE"
fi
DISK="--image-project $IMAGE_PROJECT --image $IMAGE --boot-disk-size $DISK_SIZE --boot-disk-type pd-standard"
if [ "$LOCAL_SSD" == yes ]; then
    DISK="$DISK --local-ssd device-name=ssd,interface=SCSI"
fi
OPTS="$OPTS $DISK"
echo $OPTS | gsutil cp - $GS_RUN_FOLDER/INSTANCE_OPTIONS.txt

INSTANCE_PREFIX=worker-`echo $ANALYSIS_NAME | tr A-Z_. a-z--`

for i in `seq -w 0 $((N_INSTANCES+100)) | head -$N_INSTANCES`; do
    INSTANCE=$INSTANCE_PREFIX-$i
    ZONE=${ZONES[$(((RANDOM % ${#ZONES[@]})))]}
    command="gcloud compute instances create $INSTANCE --zone $ZONE $OPTS --boot-disk-device-name $INSTANCE"
    status=(`gcloud compute instances list --filter="name=($INSTANCE)" --format="value(STATUS,ZONE)"`)
    if [ "$status" == RUNNING ]; then continue; fi
    if [ "$status" != "" ]; then
        ZONE_ORG=${status[1]}
        echo delete an existing instance $INSTANCE in $ZONE_ORG
        command="gcloud compute instances delete $INSTANCE --zone $ZONE_ORG --delete-disks all -q; $command"
    fi
    echo create a new instance $INSTANCE in $ZONE
    sh -c "$command" &
    while : ; do
        l=`ps -elf | grep gcloud | wc -l`
        if [ $l -le 20 ] ; then break; fi
        sleep 3
    done
done
